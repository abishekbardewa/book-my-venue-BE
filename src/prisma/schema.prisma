// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // url               = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  url      = env("DATABASE_URL_LOCAL")
}

enum Roles {
  OWNER
  CUSTOMER
}

enum BookingStatus {
  PENDING
  AWAITING_OWNER_APPROVAL
  FAILED
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

model OTP {
  id      String   @id @default(uuid())
  email   String   @unique
  expires DateTime
  otp     String?
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  firstName  String?
  lastName   String?
  phone      String?    @unique
  role       Roles      @default(CUSTOMER)
  avatar     String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  isDeleted  Boolean    @default(false)
  properties Property[]
  bookings   Booking[]
  payments   Payment[]
}

model Property {
  id             String          @id @default(uuid())
  propertyName   String
  description    String          @db.VarChar(600)
  capacity       String
  price          String
  checkInTime    String
  checkOutTime   String
  address        String          @db.VarChar(300)
  city           String
  country        String
  pincode        String?
  lat            String?
  lng            String?
  extraInfo      String?         @db.VarChar(400)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isDeleted      Boolean         @default(false)
  propertyImages PropertyImage[]
  ownerId        String
  owner          User            @relation(fields: [ownerId], references: [id])
  propertyTags   PropertyTags[]
  bookings       Booking[]
  amenities      Amenity[]
  reviews        Review[]
}

model Amenity {
  id          String   @id @default(uuid())
  amenityName String
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id])
}

model PropertyImage {
  id         String   @id @default(uuid())
  imgUrl     String
  caption    String?
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
}

model Review {
  id         String   @id @default(uuid())
  rating     Float
  review     String   @db.VarChar(300)
  avatar     String?
  fullName   String   @db.VarChar(300)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDeleted  Boolean  @default(false)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  bookingId  String   @unique
  booking    Booking  @relation(fields: [bookingId], references: [id])
}

model PropertyTags {
  id         String   @id @default(uuid())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  tagId      String
  tag        Tag      @relation(fields: [tagId], references: [id])
}

model Tag {
  id           String         @id @default(uuid())
  tagName      String
  propertyTags PropertyTags[]
}

model Booking {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  startDate       DateTime
  endDate         DateTime
  bookingStatus   BookingStatus
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  propertyId      String
  property        Property          @relation(fields: [propertyId], references: [id])
  bookingDate     DateTime          @default(now())
  payments        Payment[]
  bookingPayments BookingPayments[]
  reviews         Review[]
}

model BookingPayments {
  id        String   @id @default(uuid())
  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id])
  paymentId String
  payment   Payment  @relation(fields: [paymentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id             String            @id @default(uuid())
  amount         Decimal           @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  status         PaymentStatus
  transactionId  String            @default(uuid())
  bookingId      String
  booking        Booking           @relation(fields: [bookingId], references: [id])
  userId         String
  user           User              @relation(fields: [userId], references: [id])
  bookingPayment BookingPayments[]
}
