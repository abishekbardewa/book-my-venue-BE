// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Roles {
  OWNER
  CUSTOMER
}

enum BookingStatus {
  PENDING
  CONFIRM
  CANCELLED
}

enum PaymentStatus {
  PENDING
  CONFIRM
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  UPI
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  firstName  String?
  lastName   String?
  password   String
  phone      String?    @unique
  role       Roles      @default(CUSTOMER)
  avatar     String?
  properties Property[]
  reviews    Review[]
  Bookings   Booking[]
  Payments   Payment[]
}

model Property {
  id             String          @id @default(uuid())
  propertyName   String
  description    String
  capacity       String
  address        String
  city           String
  country        String
  pincode        String?
  lat            String?
  lng            String?
  propertyImages PropertyImage[]
  ownerId        String
  owner          User            @relation(fields: [ownerId], references: [id])
  reviews        Review[]
  propertyTags   PropertyTags[]
  Bookings       Booking[]
}

model PropertyImage {
  id         String   @id @default(uuid())
  imgUrl     String
  caption    String?
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
}

model Review {
  id         String   @id @default(uuid())
  rating     Float
  review     String
  reviewDate DateTime @default(now())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
}

model PropertyTags {
  id         String   @id @default(uuid())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  tagId      String
  tag        Tag      @relation(fields: [tagId], references: [id])
}

model Tag {
  id           String        @id @default(uuid())
  tagName      String
  propertyTags PropertyTags[]
}

model Booking {
  id              String           @id @default(uuid())
  bookingTime     DateTime         @default(now())
  startDate       DateTime
  endDate         DateTime
  bookingStatus   BookingStatus
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  propertyId      String
  property        Property         @relation(fields: [propertyId], references: [id])
  Payments        Payment[]
  BookingPayments BookingPayments[]
}

model BookingPayments {
  id        String  @id @default(uuid())
  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id])
  paymentId String
  payment   Payment @relation(fields: [paymentId], references: [id])
}

model Payment {
  id             String           @id @default(uuid())
  amount         Decimal          @default(0)
  paymentDate    DateTime         @default(now())
  paymentMethod  PaymentMethod
  status         PaymentStatus
  transactionId  String           @default(uuid())
  bookingId      String
  booking        Booking          @relation(fields: [bookingId], references: [id])
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  BookingPayment BookingPayments[]
}
